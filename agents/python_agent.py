"""
Code Agent using GPT-4.
Generates code from to-do lists and saves to files.
"""

import os
from typing import List
from pathlib import Path
from openai import OpenAI
from .base_agent import BaseAgent
from prompts import CODE_SYSTEM_PROMPT, CODE_GENERATION_PROMPT, format_tasks_prompt


class ProgrammingAgent(BaseAgent):
    """Agent that generates programming code from to-do lists."""
    
    def __init__(self, config: dict = None):
        super().__init__("ProgrammingAgent", config)
        self.client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        self.output_file = config.get('output_file', 'pair_program.py') if config else 'pair_program.py'
    
    def run(self, input_data: List[str]) -> str:
        """
        Generate code from a to-do list and save to file.
        
        Args:
            input_data: List of to-do items/tasks
            
        Returns:
            Path to the generated code file
        """
        try:
            self.log(f"Generating code from {len(input_data)} tasks")
            
            # Generate the code
            code = self._generate_code_from_todos(input_data)
            
            # Save to file
            file_path = self._save_code_to_file(code)
            
            self.log(f"Code successfully saved to: {file_path}")
            return file_path
            
        except Exception as e:
            self.log(f"Error generating code: {str(e)}")
            return ""
    
    def _generate_code_from_todos(self, todo_list: List[str]) -> str:
        """Generate code from the to-do list."""
        prompt = self._create_code_prompt(todo_list)
        
        response = self.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": self._get_system_prompt()},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2,
            max_tokens=2000
        )
        
        generated_code = response.choices[0].message.content.strip()
        
        # Extract code from markdown if present
        if "```python" in generated_code:
            start = generated_code.find("```python") + 9
            end = generated_code.find("```", start)
            if end != -1:
                generated_code = generated_code[start:end].strip()
        elif "```" in generated_code:
            start = generated_code.find("```") + 3
            end = generated_code.find("```", start)
            if end != -1:
                generated_code = generated_code[start:end].strip()
        
        return generated_code
    
    def _get_system_prompt(self) -> str:
        """Get the system prompt for code generation."""
        return PROGRAMMING_SYSTEM_PROMPT
    
    def _create_code_prompt(self, todo_list: List[str]) -> str:
        """Create the prompt for code generation."""
        return format_tasks_prompt(CODE_GENERATION_PROMPT, todo_list)
    
    def _save_code_to_file(self, code: str) -> str:
        """Save the generated code to a file."""
        # Create output directory if it doesn't exist
        output_path = Path(self.output_file)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Add header comment
        header = f'''"""
Generated by AI Pair Programming Multi-Agent Framework
File: {self.output_file}
Generated at: {self._get_timestamp()}
"""

'''
        
        full_code = header + code
        
        # Write to file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(full_code)
        
        return str(output_path.absolute())
    
    def _get_timestamp(self) -> str:
        """Get current timestamp as string."""
        from datetime import datetime
        return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    def validate_code(self, file_path: str) -> bool:
        """
        Validate the generated code for syntax errors.
        
        Args:
            file_path: Path to the code file
            
        Returns:
            True if code is valid, False otherwise
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                code = f.read()
            
            # Try to compile the code
            compile(code, file_path, 'exec')
            self.log("Code validation successful - no syntax errors")
            return True
            
        except SyntaxError as e:
            self.log(f"Syntax error in generated code: {e}")
            return False
        except Exception as e:
            self.log(f"Error validating code: {e}")
            return False
    
    def preview_code(self, file_path: str) -> None:
        """
        Preview the generated code.
        
        Args:
            file_path: Path to the code file
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                code = f.read()
            
            print("\n" + "="*60)
            print(f"GENERATED CODE: {file_path}")
            print("="*60)
            print(code)
            print("="*60)
            
        except Exception as e:
            self.log(f"Error previewing code: {e}")
